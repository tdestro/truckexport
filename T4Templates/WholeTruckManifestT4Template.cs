// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace truck_manifest.T4Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Collections;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class WholeTruckManifestT4Template : WholeTruckManifestT4TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\n      <TR style=\"page-break-before: always;\">\r\n      <TD><TABLE cellSpacing=0" +
                    " cellPadding=0 width=\"100%\">\r\n          <TBODY>\r\n            <TR>\r\n             " +
                    " <TD style=\"FONT-SIZE: 8pt\" align=left>");
            
            #line 14 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckID"].Insert(3,"-")));
            
            #line default
            #line hidden
            this.Write(@"</TD>
              <TD style=""FONT-SIZE: 8pt"" align=middle></TD>
              <TD style=""FONT-SIZE: 8pt"" align=right></TD>
            </TR>
            <TR>
              <TD colSpan=3><BR></TD>
            </TR>
          </TBODY>
        </TABLE></TD>
    </TR>
    <TR>
      <TD class=tripHead align=middle>");
            
            #line 25 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckID"].Insert(3,"-")));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n    </TR>\r\n    <TR>\r\n      <TD class=tripSubHead align=middle>Truck ");
            
            #line 28 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckName"]));
            
            #line default
            #line hidden
            this.Write(@"</TD>
    </TR>


     <TR>
      <TD class=tripInstruct align=middle><BR></TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle>Post Gazette</TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle><BR></TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle> ");
            
            #line 42 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["Title"]));
            
            #line default
            #line hidden
            this.Write(" Manifest for ");
            
            #line 42 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["RunDate"]));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n    </TR>\r\n    <TR>\r\n      <TD class=tripInstruct align=middle><BR></TD>\r\n" +
                    "    </TR>\t\t\t\r\n    <TR>\r\n      <TD class=tripInstruct align=middle> ");
            
            #line 48 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["DeliveryArea"]));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n    </TR>\r\n    <TR>\r\n      <TD class=tripInstruct align=middle> ");
            
            #line 51 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["GenInstructions"]));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n    </TR>\r\n    <TR>\r\n      <TD class=tripInstruct align=middle> ");
            
            #line 54 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["SpecInstructions"]));
            
            #line default
            #line hidden
            this.Write(@"</TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle><i></i></TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle></TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle><BR></TD>
    </TR>
    <TR>
      <TD class=tripInstruct align=middle>Total Number of Drops - ");
            
            #line 66 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TotalNumberOfDrops"]));
            
            #line default
            #line hidden
            this.Write(@"</TD>
    </TR>
    <TR>
      <TD align=middle>


      <TABLE borderColor=black cellSpacing=0 cellPadding=0 width=""75%"" 
        border=2>
          <TBODY>
            <TR>
              <TD><TABLE width=""100%"">
                  <TBODY>

                    <TR class=tripSumHead>
                      <TD align=left>Products For Trip# ");
            
            #line 80 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckID"].Insert(3,"-")));
            
            #line default
            #line hidden
            this.Write(@"</TD>
                      <TD align=right>Bundle Size</TD>
                      <TD align=right>Draw</TD>
                      <TD align=right>Bundles</TD>
                      <TD align=right>Odds</TD>
                    </TR>
                 




				  ");
            
            #line 91 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
       


             List<string> sortedKeyList3 =  outputsort.OrderKeysPPGFirst( new List<string> (DrawTotalsHashByProductTotals.Keys));
			 List<string> sortedProductList1;
                        foreach(string key in sortedKeyList3)
                        {
						sortedProductList1 =  outputsort.OrderKeysNumerical( new List<string> (DrawTotalsHashByProductTotals[key].Keys));

                        foreach(string key2 in sortedProductList1)
                        {
						 TotalTypes entry = DrawTotalsHashByProductTotals[key][key2];
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n                    <TR>\r\n                      <TD align=left>");
            
            #line 106 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key));
            
            #line default
            #line hidden
            this.Write("-");
            
            #line 106 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 106 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(productdesc.translate(key2,TruckDictionary["title"])));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n                      <TD align=right>");
            
            #line 107 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.StandardBundleSize));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n                      <TD align=right>");
            
            #line 108 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Draw));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n                      <TD align=right>");
            
            #line 109 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Bundles));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n                      <TD align=right>");
            
            #line 110 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Odds));
            
            #line default
            #line hidden
            this.Write("</TD>\r\n                    </TR>\r\n        ");
            
            #line 112 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
    }

    }
    
            
            #line default
            #line hidden
            this.Write(@"







                  </TBODY>
                </TABLE></TD>
            </TR>
          </TBODY>
        </TABLE></TD>
    </TR>
    <TR>
      <TD><TABLE>
          <TBODY>
            <TR>
              <TD><BR></TD>
            </TR>
          </TBODY>
        </TABLE></TD>
    </TR>
    <tr>
    <td>
      <table width=""100%"">
        <tbody>
        <tr class=""tripSumHead"">
          <td width=""3%"" align=""right"">Seq</td>
          <td width=""10%"" align=""right"">Route #</td>
          <td width=""32%"" align=""left"">Address</td>
          <td width=""45%"" align=""left"">
            <table width=""100%"" cellspacing=""0"" celpadding=""0"">
              <tbody>
              <tr class=""tripSumHead"">
                <td width=""35%"" align=""left"">Distribution For</td>
                <td width=""35%"" align=""right"">Prod</td>
                <td width=""10%"" align=""right"">Draw</td>
                <td width=""10%"" align=""right"">Bundles</td>
                <td width=""10%"" align=""right"">Odds</td></tr></tbody></table></td></tr>
                ");
            
            #line 157 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
				
				
				
				
				 List<string> sortedSeqKeyList =  outputsort.OrderKeysNumericalSeq( new List<string> (DrawTotalsHashByProductNoRouteID.Keys));

				 foreach(string seqkey in sortedSeqKeyList)
                        {
						Dictionary<string, Dictionary<string, TotalTypes>> rdd = DrawTotalsHashByProductNoRouteID[seqkey];
               
            
            #line default
            #line hidden
            this.Write("\r\n\r\n                  <tr class=\"drop pbinsideavoid\">\r\n          <td width=\"3%\" v" +
                    "align=\"top\" align=\"right\">");
            
            #line 171 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(seqkey));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td width=\"10%\" valign=\"top\" align=\"right\">");
            
            #line 172 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
  
		   List<string> routeIDList = new List<string>();
		   foreach (KeyValuePair<string,Dictionary<string, Dictionary<String,TotalTypes>>> routeidpair in DrawTotalsHashByProduct[seqkey]) {
                 	routeIDList.Add(routeidpair.Key);
					string rid = "";
                 	if (routeidpair.Key.Length == 8) {
                 	rid = routeidpair.Key.Insert (4, "-");
					} else {
					rid = routeidpair.Key;
					}
					

                
            
            #line default
            #line hidden
            this.Write("\r\n\r\n                ");
            
            #line 187 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rid));
            
            #line default
            #line hidden
            this.Write("</br>\r\n\r\n\r\n                 ");
            
            #line 190 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
                } 
            
            #line default
            #line hidden
            this.Write("</td>\r\n\r\n                 ");
            
            #line 193 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"

                List<string> addressList = new List<string>();
                List<string> routeList = new List<string>();
                 foreach (KeyValuePair<string, Dictionary<string, TotalTypes>> product in rdd) 
                 { 
                  foreach (KeyValuePair<string, TotalTypes> papersection in product.Value) 
                  { 
                   if (papersection.Value.Address.Length > 1) addressList.Add(papersection.Value.Address);
                   if (papersection.Value.RouteType.Length > 1)  routeList.Add(papersection.Value.RouteType);
                   }
                 }
               List<string> distinctAdddressList = addressList.Distinct().ToList();
               List<string> distinctRouteList = routeList.Distinct().ToList();
              var address =  string.Join("<br/><br/>", distinctAdddressList.ToArray());
              var route =  string.Join(",", distinctRouteList.ToArray()) ;
            
                
            
            #line default
            #line hidden
            this.Write("\r\n\r\n          <td width=\"32%\" valign=\"top\" align=\"left\">\r\n            <table cell" +
                    "spacing=\"0\" cellpadding=\"0\" class=\"drop\">\r\n              <tbody>\r\n              " +
                    "<tr>\r\n                <td><b></b></td></tr>\r\n              <tr>\r\n               " +
                    " <td>");
            
            #line 218 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(address));
            
            #line default
            #line hidden
            this.Write(@"</</td></tr>
              <tr>
                <td></td></tr>
              <tr>
                <td></td></tr>
              <tr>
                <td></td></tr>
              <tr>
                <td></td></tr></tbody></table></td>
          <td width=""50%"" valign=""top"" align=""left"">
            <table width=""100%"" cellspacing=""0"" celpadding=""0"" class=""drop"">
              <tbody>
              ");
            
            #line 230 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"





                
                List<string> sortedKeyList =  outputsort.OrderKeysPPGFirst( new List<string> (rdd.Keys));

                        foreach(string key in sortedKeyList)
                        {
                        Dictionary<string,TotalTypes> product = rdd[key];
 
              foreach (KeyValuePair<string, TotalTypes> papersection in product) { 
                
            
            #line default
            #line hidden
            this.Write("              <tr><!--");
            
            #line 244 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.numberinlist));
            
            #line default
            #line hidden
            this.Write("-->\r\n                <td width=\"35%\"align=\"left\" class=\"dropProd\">");
            
            #line 245 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(toDistributionFor(key,papersection.Key)));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"35%\"align=\"right\">");
            
            #line 246 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key+"-"+papersection.Key));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"10%\"align=\"right\">");
            
            #line 247 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Draw));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"10%\"align=\"right\">");
            
            #line 248 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Bundles));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"10%\" align=\"right\">");
            
            #line 249 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Odds));
            
            #line default
            #line hidden
            this.Write("</td>\r\n               </tr>\r\n                ");
            
            #line 251 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 } } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t                </tbody></table></td></tr>\r\n            \r\n        <tr class" +
                    "=\"drop\">\r\n          <td colspan=\"4\">\r\n            <hr>\r\n          </td></tr>");
            
            #line 258 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</tbody></table>\r\n           \r\n\r\n\r\n           ");
            
            #line 262 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
           // Check if coin boxes are in this truck.
           Boolean coinbox = false;
           foreach (KeyValuePair<string, Dictionary<string,Dictionary<string, TotalTypes>>> rdd in DrawTotalsHashByProductNoRouteID) { 
           foreach (KeyValuePair<string,Dictionary<string,TotalTypes>> product in rdd.Value) { 
           foreach (KeyValuePair<string,TotalTypes> papersections in product.Value) { 
             if (papersections.Value.RouteType=="RACK"){
                coinbox=true; 
                break;
                }
               } 
               if (coinbox) break;
           }
               if (coinbox) break;
           }

               if(coinbox){
                
            
            #line default
            #line hidden
            this.Write(@"
          <table width=""100%"">
        <tbody>
<tr class=""dtopTotHead"">
        <td align=""middle"" width=""100%"" colspan=4>Coin Box Drop Summary</td>
        </tr>

        <tr class=""tripSumHead"">
          <td width=""3%"" align=""right"">Seq</td>
          <td width=""10%"" align=""right"">Route #</td>
          <td width=""32%"" align=""left"">Address</td>
          <td width=""45%"" align=""left"">
            <table width=""100%"" cellspacing=""0"" celpadding=""0"">
              <tbody>
              <tr class=""tripSumHead"">
                <td width=""35%"" align=""left"">Distribution For</td>
                <td width=""35%"" align=""right"">Prod</td>
                <td width=""10%"" align=""right"">Draw</td>
                <td width=""10%"" align=""right"">Bundles</td>
                <td width=""10%"" align=""right"">Odds</td></tr></tbody></table></td></tr>
                ");
            
            #line 300 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 foreach (KeyValuePair<string, Dictionary<string,Dictionary<string,TotalTypes>>> rdd in DrawTotalsHashByProductNoRouteID) { 

                // Is this a coinbox ?

                  List<string> sortedKeyList =  outputsort.OrderKeysPPGFirst( new List<string> (rdd.Value.Keys));

                        foreach(string key in sortedKeyList)
                        {
                        Dictionary<string,TotalTypes> product = rdd.Value[key];
 
               foreach (KeyValuePair<string,TotalTypes> papersections in product) { 
               if (papersections.Value.RouteType == "RACK"){
                
            
            #line default
            #line hidden
            this.Write("                  <tr class=\"drop pbinsideavoid\">\r\n          <td width=\"3%\" valig" +
                    "n=\"top\" align=\"right\">");
            
            #line 314 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rdd.Key));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td width=\"10%\" valign=\"top\" align=\"right\">");
            
            #line 315 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
   foreach (KeyValuePair<string,Dictionary<string,Dictionary<String,TotalTypes>>> routeidpair in DrawTotalsHashByProduct[rdd.Key]) {
                 	string rid = "";
                 	if (routeidpair.Key.Length == 8) {
                 	rid = routeidpair.Key.Insert (4, "-");
					} else {
					rid = routeidpair.Key;
					}
                
            
            #line default
            #line hidden
            this.Write("\r\n\r\n                ");
            
            #line 325 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rid));
            
            #line default
            #line hidden
            this.Write("</br>\r\n\r\n\r\n                 ");
            
            #line 328 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
                } 
            
            #line default
            #line hidden
            this.Write("                </td>\r\n\r\n                 ");
            
            #line 332 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"

                List<string> addressList = new List<string>();
                List<string> routeList = new List<string>();
                   List<string> sortedKeyList1 =  outputsort.OrderKeysPPGFirst( new List<string> (rdd.Value.Keys));

                        foreach(string key1 in sortedKeyList1)
                        {
                        Dictionary<string,TotalTypes> product1 = rdd.Value[key1];
 
                  foreach (KeyValuePair<string, TotalTypes> papersection1 in product1) 
                  { 
                   if (papersection1.Value.Address.Length > 1) addressList.Add(papersection1.Value.Address);
                   if (papersection1.Value.RouteType.Length > 1)  routeList.Add(papersection1.Value.RouteType);
                   }
                 }
               List<string> distinctAdddressList = addressList.Distinct().ToList();
               List<string> distinctRouteList = routeList.Distinct().ToList();
              var address =  string.Join("<br/><br/>", distinctAdddressList.ToArray());
              var route =  string.Join(",", distinctRouteList.ToArray()) ;
            
                
            
            #line default
            #line hidden
            this.Write("\r\n          <td width=\"32%\" valign=\"top\" align=\"left\">\r\n            <table cellsp" +
                    "acing=\"0\" cellpadding=\"0\" class=\"drop\">\r\n              <tbody>\r\n              <t" +
                    "r>\r\n                <td><b></b></td></tr>\r\n              <tr>\r\n                <" +
                    "td>");
            
            #line 360 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(address));
            
            #line default
            #line hidden
            this.Write(@"</</td></tr>
              <tr>
                <td></td></tr>
              <tr>
                <td></td></tr>
              <tr>
                <td></td></tr>
              <tr>
                <td></td></tr></tbody></table></td>
          <td width=""50%"" valign=""top"" align=""left"">
            <table width=""100%"" cellspacing=""0"" celpadding=""0"" class=""drop"">
              <tbody>

   

                    ");
            
            #line 375 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
                     
                        sortedKeyList1 =  outputsort.OrderKeysPPGFirst( new List<string> (rdd.Value.Keys));

                        foreach(string key1 in sortedKeyList1)
                        {
                        Dictionary<string,TotalTypes> product1 = rdd.Value[key1];

               foreach (KeyValuePair<string,TotalTypes> papersection1 in product1) { 
               
            
            #line default
            #line hidden
            this.Write("              <tr>\r\n              <td width=\"35%\" align=\"left\" class=\"dropProd\">");
            
            #line 386 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(toDistributionFor(key1,papersection1.Key)));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"35%\" align=\"right\">");
            
            #line 387 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key1+"-"+papersection1.Key));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"10%\" align=\"right\">");
            
            #line 388 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection1.Value.Draw));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"10%\" align=\"right\">");
            
            #line 389 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection1.Value.Bundles));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td width=\"10%\" align=\"right\">");
            
            #line 390 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection1.Value.Odds));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                ");
            
            #line 391 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 } 

                }
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\r\n                        </tbody></table></td></tr>\r\n            \r\n       " +
                    " <tr class=\"drop\">\r\n          <td colspan=\"4\">\r\n            <hr>\r\n          </td" +
                    "></tr>\r\n\r\n\r\n\r\n                ");
            
            #line 407 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"

                }
                }
                } 
                
            
            #line default
            #line hidden
            this.Write("\r\n\r\n       \r\n\r\n            ");
            
            #line 416 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            </tbody></table>\r\n         ");
            
            #line 418 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 }
           
            
            #line default
            #line hidden
            this.Write("       \r\n\r\n\r\n\r\n\r\n\r\n\r\n          </td></tr>\r\n\r\n\r\n\r\n            ");
            
            #line 431 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
			// todo: 501-518 remove bundle tops from them on daily
            // 751-768 sunday three star
            // saturday advance 201 remove bundle tops
			Int32 shortruckid = Int32.Parse(TruckDictionary["TruckID"].Substring(0, 3));
			//if(!TruckDictionary["RunDate"].Contains("Sunday") && !(shortruckid >= 501 && shortruckid <= 518)){
			List<string> sPList =  outputsort.OrderKeysNumericalSeq( new List<string> (DrawTotalsHashByProductNoRouteID.Keys));
                        foreach(string nextkey in sPList)
                        {
						 Dictionary<string, Dictionary<string, TotalTypes>> rdd = DrawTotalsHashByProductNoRouteID[nextkey];
			
			//foreach (KeyValuePair<string, Dictionary<string, Dictionary<string, TotalTypes>>> rdd in DrawTotalsHashByProductNoRouteID) { 
               
			   
			    
            
            #line default
            #line hidden
            this.Write("          <tr style=\"page-break-before: always;\">\r\n    <td>\r\n      <table width=\"" +
                    "100%\" cellspacing=\"0\" cellpadding=\"0\">\r\n        <tbody>\r\n        <tr>\r\n         " +
                    " <td align=\"left\" style=\"FONT-SIZE: 8pt\">");
            
            #line 451 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckID"].Insert(3,"-")));
            
            #line default
            #line hidden
            this.Write(@"</td>
          <td align=""center"" style=""FONT-SIZE: 8pt""></td>
          <td align=""right"" style=""FONT-SIZE: 8pt"">Key Page: </td></tr>
        <tr>
          <td colspan=""3""><br></td></tr></tbody></table></td></tr>




          <tr>
    <td>
      <table width=""100%"" cellspacing=""0"" cellpadding=""0"">
        <tbody>
        <tr> 
          <td width=""33%"" align=""left"" class=""tripSubHead"">KEY ");
            
            #line 465 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckID"].Insert(3,"-")));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td width=\"33%\" align=\"center\" class=\"tripSubHead\">TRUCK ");
            
            #line 466 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckName"]));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td align=\"right\" class=\"TripSubHead\">Post Gazette</td></tr>\r\n  " +
                    "      <tr>\r\n          <td></td>\r\n          <td align=\"right\" colspan=\"2\" class=\"" +
                    "tripSubHead\"> ");
            
            #line 470 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["RunDate"]));
            
            #line default
            #line hidden
            this.Write(@"</td></tr></tbody></table>
      <table width=""100%"" cellspacing=""0"" cellpadding=""0"">
        <tbody>
        <tr class=""dropTot"">
          <td><br></td></tr>
        <tr class=""dropTotHead"">
          <td width=""15%"" valign=""top"" align=""left""><b>Trip</b></td>
          <td width=""20%"" valign=""top"" align=""left""><b>Sequence</b></td>
          <td width=""15%"" valign=""top"" align=""left""><b>Route #</b></td>
          <td width=""50%"" valign=""top"" align=""left""><b>Drop Address</b></td></tr>
        <tr class=""dropTot"">
          <td valign=""top"" align=""left"" class=""dropTot"">");
            
            #line 481 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TruckDictionary["TruckID"].Insert(3,"-")));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td valign=\"top\" align=\"left\" class=\"dropTot\">");
            
            #line 482 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nextkey));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                           \r\n\r\n\r\n          <td valign=\"top\" align=\"left\" c" +
                    "lass=\"dropTot\">");
            
            #line 486 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
   foreach (KeyValuePair<string,Dictionary<string,Dictionary<String,TotalTypes>>> routeidpair in DrawTotalsHashByProduct[nextkey]) {
                 	string rid = "";
                 	if (routeidpair.Key.Length == 8) {
                 	rid = routeidpair.Key.Insert (4, "-");
					} else {
					rid = routeidpair.Key;
					}
                
            
            #line default
            #line hidden
            this.Write("\r\n\r\n                ");
            
            #line 496 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rid));
            
            #line default
            #line hidden
            this.Write("</br>\r\n\r\n\r\n                 ");
            
            #line 499 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 
                } 
            
            #line default
            #line hidden
            this.Write("</td>\r\n\r\n                 ");
            
            #line 502 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"


                List<string> nameList = new List<string>();
                List<string> addressList = new List<string>();
                List<string> routeList = new List<string>();
                 foreach (KeyValuePair<string, Dictionary<string, TotalTypes>> product in rdd) 
                 { 
                  foreach (KeyValuePair<string, TotalTypes> papersection in product.Value) 
                  { 
                   if (papersection.Value.Name.Length > 1) nameList.Add(papersection.Value.Name);
                   if (papersection.Value.Address.Length > 1) addressList.Add(papersection.Value.Address);
                   if (papersection.Value.RouteType.Length > 1)  routeList.Add(papersection.Value.RouteType);
                   }
                 }
               List<string> distinctAdddressList = addressList.Distinct().ToList();
               List<string> distinctRouteList = routeList.Distinct().ToList();
               List<string> distinctNameList = nameList.Distinct().ToList();
              var address =  string.Join("<br/><br/>", distinctAdddressList.ToArray());
              var route =  string.Join(",", distinctRouteList.ToArray()) ;
              var name =  string.Join(",", distinctNameList.ToArray()) ;
            
                
            
            #line default
            #line hidden
            this.Write("\r\n\r\n          <td valign=\"top\" align=\"left\" class=\"dropTot\"></td></tr>\r\n\r\n       " +
                    " <tr class=\"dropTot\">\r\n          <td></td>\r\n          <td></td>\r\n          <td><" +
                    "/td>\r\n          <td style=\"font-size: 150%; border-style: solid; border-width: 1" +
                    "px;\"> ");
            
            #line 532 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(address));
            
            #line default
            #line hidden
            this.Write(@"</td></tr>
        <tr class=""dropTot"">
          <td></td>
          <td></td>
          <td></td>
          <td></td></tr>
        <tr class=""dropTot"">
          <td><br></td></tr></tbody></table>

         


<TABLE width=""100%"" cellspacing=""0"" cellpadding=""0"">
<tbody>
  <tr class=""drop"">
    <td align=""left"" valign=""top""><B>Customer</B></td>
    <td align=""left"" valign=""top"">
  <table width=""100%"" cellspacing=""0"" cellpadding=""0"">
    <tbody>
      <tr>
        <td width=""50%"" align=""right"" class=""drop""><b>District-Route</b></td>
        <td width=""30%"" align=""right"" class=""drop""><b>Prod</b></td>
        <td width=""20%"" align=""right"" class=""drop""><b>Draw</b></td>
      </tr>
    </tbody>
  </table>
  </td>
  </tr>  

  <tr class=""drop"">
    <td width=""40%"" align=""left"" valign=""top"">");
            
            #line 562 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("<br/>");
            
            #line 562 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(address));
            
            #line default
            #line hidden
            this.Write("</td>\r\n    <td width=\"60%\" align=\"left\" valign=\"top\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <table w" +
                    "idth=\"100%\" cellspacing=\"0\" cellpadding=\"0\">\r\n      <tbody>\r\n\r\n       ");
            
            #line 574 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
   foreach (KeyValuePair<string,Dictionary<string,Dictionary<String,TotalTypes>>> routeidpair in DrawTotalsHashByProduct[nextkey]) {
                 	string rid = "";
                 	if (routeidpair.Key.Length == 8) {
                 	rid = routeidpair.Key.Insert (4, "-");
					} else {
					rid = routeidpair.Key;
					}
                
            
            #line default
            #line hidden
            this.Write("      <tr>\r\n          <td width=\"50%\" align=\"right\" class=\"drop\"> ");
            
            #line 583 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rid));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td width=\"30%\" align=\"right\" class=\"drop\"></td>\r\n          <td " +
                    "width=\"20%\" align=\"right\" class=\"drop\"></td>\r\n        </tr>\r\n\r\n       ");
            
            #line 588 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
   
         List<string> sortedKeyList =  outputsort.OrderKeysPPGFirst( new List<string> (routeidpair.Value.Keys));

                        foreach(string key in sortedKeyList)
                        {
                        Dictionary<string,TotalTypes> productpair = routeidpair.Value[key];
 
                 
       foreach (KeyValuePair<string,TotalTypes> papersectionpair in productpair) { 
                
            
            #line default
            #line hidden
            this.Write("        <tr>\r\n          <td width=\"50%\" align=\"right\" class=\"drop\"></td>\r\n       " +
                    "   <td width=\"30%\" align=\"right\" class=\"drop\">");
            
            #line 600 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key));
            
            #line default
            #line hidden
            this.Write("-");
            
            #line 600 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersectionpair.Key));
            
            #line default
            #line hidden
            this.Write("</td>\r\n          <td width=\"20%\" align=\"right\" class=\"drop\">");
            
            #line 601 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersectionpair.Value.Draw));
            
            #line default
            #line hidden
            this.Write("</td>\r\n        </tr>\r\n          ");
            
            #line 603 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"

           }
           }
		   }
            
            
            #line default
            #line hidden
            this.Write(@"	
	
      </tbody>
    </table>
	
	
	
	</td>
  </tr>
</tbody>
</TABLE>


          </td></tr>

		


          <tr>
    <td align=""left"">
      <table width=""100%"">
        <tbody>
        <tr>
          <td class=""dropTotHead"">Delivery Instructions:</td>
        </tr><tr>
        </tr>   ");
            
            #line 633 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 foreach (KeyValuePair<string, Dictionary<string,TotalTypes>> product in rdd) { 
                   foreach (KeyValuePair<string,TotalTypes> papersection in product.Value) { 
               
            
            #line default
            #line hidden
            this.Write("     <tr>\r\n          <td align=\"left\" class=\"dropTot\">");
            
            #line 637 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Instructions));
            
            #line default
            #line hidden
            this.Write("</td> \r\n          ");
            
            #line 638 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 break;
           } 
           break;
           }
            
            #line default
            #line hidden
            this.Write(@"         </tr>
        <tr>
          <td align=""left"" class=""dropTot""></td></tr>
        <tr>
          <td align=""left"" class=""dropTot""></td></tr>
        <tr>
          <td align=""left"" class=""dropTot""></td></tr>
        <tr>
          <td align=""left"" class=""dropTot""></td></tr>
        <tr>
          <td align=""left"" class=""dropTot""></td></tr></tbody></table></td></tr>
          <tr>
    <td><br></td></tr>
<tr>
    <td align=""left"">
      <table width=""100%"" cellspacing=""0"" cellpadding=""0"" bordercolor=""black"" border=""2"">
        <tbody>
        <tr>
          <td>
            <table width=""100%"" cellspacing=""0"" cellpadding=""0"">
              <tbody>
              <tr class=""dropTotHead"">
                <td width=""45%"" align=""left"">Product</td>
                <td width=""10%"" align=""right"">Bundle Size</td>
                <td width=""10%"" align=""right"">Draw</td>
                <td width=""20%"" align=""right""></td>
                <td width=""15%"" align=""right""></td></tr>
               
                 ");
            
            #line 670 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"

                   List<string> sortedKeyList2 =  outputsort.OrderKeysPPGFirst( new List<string> (rdd.Keys));

                        foreach(string key2 in sortedKeyList2)
                        {
                        Dictionary<string,TotalTypes> product2 = rdd[key2];

                    
                  foreach (KeyValuePair<string,TotalTypes> papersection in product2) { 
               
            
            #line default
            #line hidden
            this.Write("     \r\n              <tr>\r\n                <td align=\"left\" class=\"dropTot\" style" +
                    "=\"font-size: 150%;\"> ");
            
            #line 682 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key2+"-"+papersection.Key));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td align=\"right\" class=\"dropTot\" style=\"font-size: 150%;\"" +
                    "> ");
            
            #line 683 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.StandardBundleSize));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td align=\"right\" class=\"dropTotAttn\" style=\"font-size: 15" +
                    "0%;\"> ");
            
            #line 684 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Draw));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td align=\"right\" class=\"dropTotAttn\" style=\"font-size: 15" +
                    "0%;\"> ");
            
            #line 685 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Bundles));
            
            #line default
            #line hidden
            this.Write(" bundles</td>\r\n                <td align=\"right\" class=\"dropTotAttn\" style=\"font-" +
                    "size: 150%;\">");
            
            #line 686 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(papersection.Value.Odds));
            
            #line default
            #line hidden
            this.Write(" \r\n          odds</td></tr>\r\n\r\n          ");
            
            #line 689 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
  } }
            
            #line default
            #line hidden
            this.Write(@"
          </tbody></table></td></tr></tbody></table></td></tr>
<tr>
    <td align=""center"" class=""drop""><br></td></tr>
<tr>
    <td align=""center"" class=""drop"">For Shortages, Billing, and Delivery questions 
      please call - 412-263-1160</td></tr>
      <tr>
    <td align=""center"" class=""drop"">When contacting us please provide your 
      District and Route number that is located on the top left of this 
  page.</td></tr>
          ");
            
            #line 701 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 } 
		  
		  
		  
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n\r\n\r\n\r\n\r\n  ");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 718 "C:\Users\IEUser\Desktop\truckexport\T4Templates\WholeTruckManifestT4Template.tt"
 

  string toDistributionFor(string product, string productnumber){
  if(product == "PPG" && (productnumber =="200" || productnumber =="none")){
  return "5-Day Regular/Late Run";
  } else return "";



  }
public StringDictionary TruckDictionary {get; set; }
public Dictionary<string, Dictionary<string, Dictionary<string,TotalTypes>>> DrawTotalsHashByProductNoRouteID  {get; set; }
public Dictionary<string, Dictionary<string, Dictionary<string, Dictionary<string, TotalTypes>>>> DrawTotalsHashByProduct  {get; set; }
public Dictionary <string, Dictionary<string, TotalTypes>> DrawTotalsHashByProductTotals {get; set; }
public List<Hashtable> productTotals {get; set;}
public Dictionary<string, TotalTypes> ProductsDrawTotalsHash {get; set;}
public Dictionary<string, TotalTypes> ProductsD1DrawTotalsHash {get; set;}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class WholeTruckManifestT4TemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
